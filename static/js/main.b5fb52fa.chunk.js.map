{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","username","getUser","usersFromServer","find","person","todosWithUser","userId","getId","ids","Math","max","App","useState","setTodos","todoTitle","todoUser","formValues","setFormValues","titleError","userError","formErrors","setFormErrors","handleChanges","event","prevFormValues","target","value","prevErrors","action","method","onSubmit","preventDefault","newTodo","trim","prevTodos","htmlFor","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5fb52fa.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface Props {\n  user?: User\n}\n\nexport const UserInfo:React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      <UserInfo user={todo.user} />\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\n\nfunction getUser(id: number) {\n  return usersFromServer.find(person => id === person.id);\n}\n\nconst todosWithUser = todosFromServer.map(todo => {\n  const user = getUser(todo.userId);\n\n  return {\n    ...todo,\n    user,\n  };\n});\n\nfunction getId(todos: Todo[]) {\n  const ids = todos.map(todo => todo.id);\n  const newId = Math.max(...ids) + 1;\n\n  return newId;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosWithUser);\n  const [formValues, setFormValues] = useState({\n    todoTitle: '',\n    todoUser: '0',\n  });\n  const [formErrors, setFormErrors] = useState({\n    titleError: false,\n    userError: false,\n  });\n\n  function formReset() {\n    setFormValues({\n      todoTitle: '',\n      todoUser: '0',\n    });\n  }\n\n  function handleSubmitErrors() {\n    if (!formValues.todoTitle.trim()) {\n      setFormErrors(prevErrors => ({\n        ...prevErrors,\n        titleError: true,\n      }));\n    }\n\n    if (!+formValues.todoUser) {\n      setFormErrors(prevErrors => ({\n        ...prevErrors,\n        userError: true,\n      }));\n    }\n  }\n\n  function handleChanges(event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLSelectElement>) {\n    setFormValues(prevFormValues => ({\n      ...prevFormValues,\n      [event.target.name]: event.target.value,\n    }));\n    if (formErrors.titleError && event.target.name === 'todoTitle') {\n      setFormErrors(prevErrors => ({\n        ...prevErrors,\n        titleError: false,\n      }));\n    }\n\n    if (formErrors.userError && event.target.name === 'todoUser') {\n      setFormErrors(prevErrors => ({\n        ...prevErrors,\n        userError: false,\n      }));\n    }\n  }\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n\n    const user = getUser(+formValues.todoUser);\n\n    const newTodo = {\n      id: getId(todos),\n      title: formValues.todoTitle,\n      completed: false,\n      userId: +formValues.todoUser,\n      user,\n    };\n\n    handleSubmitErrors();\n\n    if (!formValues.todoTitle.trim() || !+formValues.todoUser) {\n      return;\n    }\n\n    setTodos(prevTodos => [...prevTodos, newTodo]);\n\n    formReset();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"todoTitle\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"todoTitle\"\n            data-cy=\"titleInput\"\n            name=\"todoTitle\"\n            placeholder=\"Enter a title\"\n            value={formValues.todoTitle}\n            onChange={handleChanges}\n          />\n          {formErrors.titleError\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"todoUser\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"todoUser\"\n            name=\"todoUser\"\n            value={formValues.todoUser}\n            onChange={handleChanges}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {formErrors.userError\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}